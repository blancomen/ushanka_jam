[gd_scene load_steps=7 format=2]

[sub_resource type="GDScript" id=1]

script/source = "extends Node2D

func _ready():
	pass
	
func _on_add_event_pressed():
	var neurons = get_node(\"neurons\")
	if neurons.selected_neuron != null:
		neurons.selected_neuron.add_event(get_node(\"matrix\").main_matrix)
		reset()
	
func reset():
	get_node(\"matrix\").reset()
	get_node(\"draw_area\").reset()
	get_node(\"normilized_track\").reset()

func _on_reset_matrix_pressed():
	reset()


func _on_add_neuron_pressed():
	get_node(\"neurons\").create_neuron()
"

[sub_resource type="GDScript" id=2]

script/source = "extends Container

var track = PoolVector2Array()
var is_touched = false
var should_save_track = false
var mouse_on = false

var norm_track
var active_matrix

func _ready():
	norm_track = get_parent().get_node(\"normilized_track\")
	active_matrix = get_parent().get_node(\"matrix\")
	
	set_process_input(true)
	set_physics_process(true)
	pass

func _physics_process(delta):
	var neurons = get_parent().get_node(\"neurons\")
	var is_neuron_move = neurons.is_mouse_on && neurons.is_moved
	
	if is_touched:
		if !should_save_track && mouse_on:
			track = PoolVector2Array()
			should_save_track = true
			
		if should_save_track && !is_neuron_move:
			var mouse_pos = get_global_mouse_position()
		
			if track.size() < 100:
				track.push_back(mouse_pos)
	else:
		if should_save_track:
			norm_track.set_track(track)
			active_matrix.add_track(norm_track.crop_box(track))
			
		should_save_track = false
		
	update()

func _draw():
	var movavg_track = moving_average(track, 3)
	draw_track(track, Color(255, 255, 255), 2)
			
func draw_track(track, color, width):	
	var prev_coord = null
	for coordinate in track:
		if prev_coord != null:
			draw_line(prev_coord, coordinate, color, width)		
		prev_coord = coordinate

func _input(event):
	if event is InputEventMouseButton:
		if event.pressed:
			is_touched = true
		else:
			is_touched = false
			
func moving_average(coords, window):	
	var movavg_coords = PoolVector2Array()
	for i in range(coords.size()):
		if i >= window:
			var sum = Vector2()
			for j in range(window):
				sum += coords[i-j]
			movavg_coords.push_back(sum/window)
			
	return movavg_coords
	
func reset():
	track = PoolVector2Array()
	update()
			
func _on_draw_area_mouse_entered():
	mouse_on = true

func _on_draw_area_mouse_exited():
	mouse_on = false
"

[sub_resource type="GDScript" id=3]

script/source = "extends Node2D

var matrix_size = Vector2(18, 18)
var main_matrix = zeros_matrix(matrix_size.x, matrix_size.y)
var cell_size = 5

func _ready():
	pass

func add_track(track):
	main_matrix = fit_matrix(main_matrix, track)
	
	update()

func reset():
	main_matrix = zeros_matrix(matrix_size.x, matrix_size.y)
	update()

func get_height():
	return matrix_size.y * cell_size

func _draw():
	var mat_max = matrix_max_value(main_matrix)
	if mat_max == 0:
		mat_max = 1

	for row in range(main_matrix.size()):
		for column in range(main_matrix[row].size()):
			draw_rect(
				Rect2(
					column * cell_size,
					row * cell_size, 
					cell_size,
					cell_size
				), 
				Color(float(main_matrix[row][column]) / float(mat_max), 0, 0)
			)

func fit_matrix(matrix, track):
	var box = find_box(track)
	var maxPoint = Vector2(
		max(box[\"max\"].x, box[\"max\"].y), 
		max(box[\"max\"].x, box[\"max\"].y)
	)

	var step_done_matrix = zeros_matrix(matrix_size.x, matrix_size.y)
	var prev_coord = null
	for coord in track:
		if prev_coord == null:
			prev_coord = coord
			continue
	
		var step = 1
		var from = prev_coord
		var to = coord
		var distance = from.distance_to(to)
		var steps = floor(distance / step)
		
		var line_coord = prev_coord
		for s in range(steps):
			var i = ceil(line_coord.y / maxPoint.y * (matrix_size.y-1))
			var j = ceil(line_coord.x / maxPoint.x * (matrix_size.x-1))
			
			line_coord = line_coord.linear_interpolate(to, s/steps)
		
			if step_done_matrix[i][j] == 0:
				matrix[i][j] += 1
				step_done_matrix[i][j] = 1
			
			prev_coord = coord
			
	return matrix
	
func zeros_matrix(w, h):
	var matrix = []
	for i in range(h):
		matrix.push_back([])
		for j in range(w):
			matrix[i].push_back(0)
	return matrix 
	
func norm_matrix(matrix):
	var max_val = matrix_max_value(matrix)
	var norm_m = zeros_matrix(matrix_size.x, matrix_size.y)
	for row in range(matrix.size()):
		for column in range(matrix[row].size()):
			norm_m[row][column] = float(matrix[row][column])/float(max_val)

	return norm_m
	
func matrix_max_value(matrix):
	if matrix.size() == 0:
		return 0
		
	var maxVal = matrix[0][0]
	for row in matrix:
		for column in row:
			if maxVal < column:
				maxVal = column
	return maxVal

func find_box(coords):
	var box = {
		\"min\": Vector2(999999999, 999999999),
		\"max\": Vector2(-999999999, -999999999),
	}
	
	for coord in coords:
		box[\"min\"].x = min(box[\"min\"].x, coord.x)
		box[\"min\"].y = min(box[\"min\"].y, coord.y)
		box[\"max\"].x = max(box[\"max\"].x, coord.x)
		box[\"max\"].y = max(box[\"max\"].y, coord.y)
		
	return box

func _on_reset_matrix_pressed():
	main_matrix = zeros_matrix(matrix_size.x, matrix_size.y)
	update()
"

[sub_resource type="GDScript" id=4]

script/source = "tool
extends Node2D

var track = PoolVector2Array()
var track_size = Vector2(88, 88)

func _ready():
	pass

func set_track(t):
	t = normalize_coordinates(t)
	t = moving_average(t, 2)
	track = t
	
	update()

func reset():
	track = PoolVector2Array()
	update()

func _draw():
	var box = find_box(track)
	var maxCoord = Vector2(
		max(box[\"max\"].x, box[\"max\"].y), 
		max(box[\"max\"].x, box[\"max\"].y)
	)
	
	var step = 0.5
	var prev_coord = null
	for coordinate in track:
		if prev_coord != null:
			var from = prev_coord * track_size
			var to = coordinate * track_size
			var distance = from.distance_to(to)
			var steps = floor(distance / step)
			var line_coord = prev_coord * track_size
			draw_line(
				prev_coord * track_size, 
				coordinate * track_size, 
				Color(255, 255, 255),2
			)
		prev_coord = coordinate
	

func normalize_coordinates(coords):
	coords = crop_box(coords)
	var box = find_box(coords)
	var maxPoint = Vector2(
		max(box[\"max\"].x, box[\"max\"].y), 
		max(box[\"max\"].x, box[\"max\"].y)
	)
	
	#coords = centered_coords(coords)
	
	if maxPoint.x == 0:
		maxPoint.x = 1
	if maxPoint.y == 0:
		maxPoint.y = 1
	
	var normCoords = PoolVector2Array()
	for coord in coords:
		coord.x /= maxPoint.x
		coord.y /= maxPoint.y
		normCoords.push_back(coord)
	
	return normCoords

func centered_coords(coords):
	var box = find_box(coords)
	var maxPoint = Vector2(
		max(box[\"max\"].x, box[\"max\"].y), 
		max(box[\"max\"].x, box[\"max\"].y)
	)
	
	var centerCoords = PoolVector2Array()
	for coord in coords:
		coord.x -= box[\"max\"].x/2
		coord.y -= box[\"max\"].y/2
		centerCoords.push_back(coord)
		
	return centerCoords

func crop_box(coords):
	var box = find_box(coords)
	var cropedCoords = PoolVector2Array()
	var minPoint = Vector2(box[\"min\"].x, box[\"min\"].y)
	
	for coord in coords:
		cropedCoords.push_back(coord - minPoint)
	
	return cropedCoords
	
	
func find_box(coords):
	var box = {
		\"min\": Vector2(999999999, 999999999),
		\"max\": Vector2(-999999999, -999999999),
	}
	
	for coord in coords:
		box[\"min\"].x = min(box[\"min\"].x, coord.x)
		box[\"min\"].y = min(box[\"min\"].y, coord.y)
		box[\"max\"].x = max(box[\"max\"].x, coord.x)
		box[\"max\"].y = max(box[\"max\"].y, coord.y)
		
	return box

func moving_average(coords, window):	
	var movavg_coords = PoolVector2Array()
	for i in range(coords.size()):
		if i >= window:
			var sum = Vector2()
			for j in range(window):
				sum += coords[i-j]
			movavg_coords.push_back(sum/window)
			
	return movavg_coords"

[sub_resource type="GDScript" id=5]

script/source = "extends Node2D

var neuron_class = preload(\"res://input_tracker/neuron.tscn\")
var neurons = []
var is_mouse_on = false
var is_moved = false
var selected_neuron = null

func _ready():
	set_physics_process(true)
	set_process_input(true)
	pass	

func _physics_process(delta):
	is_mouse_on = false
	is_moved = false
	
	for n in neurons:
		if n.get_node(\"out\").mouse_on:
			is_mouse_on = true
		if n.get_node(\"out\").is_move:
			is_moved = true

func _input(event):
	if event is InputEventMouseButton:
		if event.pressed:	
			var find_select = false
			for neuron in neurons:
				var out = neuron.get_node(\"out\")
				
				if is_mouse_on:
					out.is_select = false
				
				if out.mouse_on && !find_select:
					out.is_select = true
					selected_neuron = neuron
					find_select = true
					
				out.update()

func create_neuron():
	var neuron_instance = neuron_class.instance()
	neuron_instance.position = Vector2(32, 150)
	add_child(neuron_instance)
	neurons.append(neuron_instance)"

[sub_resource type="GDScript" id=6]

script/source = "extends Node2D

func _ready():
	pass
	
func save_neurons():
	var neurons = get_parent().get_node(\"neurons\").neurons
		
	var neurons_struct = []
	for neuron in neurons:
		var neuron_struct = {
			\"x\": neuron.position.x,
			\"y\": neuron.position.y,
			\"events\": [],
		}
		var events_struct = []
		for event in neuron.events:
			events_struct.append(event.main_matrix)
		neuron_struct[\"events\"] = events_struct
		neurons_struct.append(neuron_struct)
			
	var json = to_json(neurons_struct)
	save_file(\"1\", json)
		
func save_file(filename, content):
    var file = File.new()
    file.open(\"user://\" + filename + \".dat\", file.WRITE)
    file.store_string(content)
    file.close()
 
func load_file(file):
	pass
    #var file = File.new()
    #file.open(\"user://\" + file + \".dat\", file.READ)
    #var content = file.get_as_text()
    #file.close()
    #return content

func _on_save_actions_pressed():
	save_neurons()
"

[node name="game" type="Node2D"]

_sections_unfolded = [ "Material", "Pause", "Transform", "Visibility", "Z" ]
__meta__ = {
"_edit_lock_": true
}

[node name="input_tracker" type="Node2D" parent="."]

position = Vector2( -0.999023, -0.998947 )
script = SubResource( 1 )

[node name="draw_area" type="Container" parent="input_tracker"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = -1.0
margin_right = 1023.0
margin_bottom = 600.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1
script = SubResource( 2 )
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[node name="matrix" type="Node2D" parent="input_tracker"]

position = Vector2( 32, 8 )
script = SubResource( 3 )
_sections_unfolded = [ "Transform", "Z" ]

[node name="normilized_track" type="Node2D" parent="input_tracker"]

position = Vector2( 33, 9 )
script = SubResource( 4 )
_sections_unfolded = [ "Transform", "Visibility" ]

[node name="neurons" type="Node2D" parent="input_tracker"]

script = SubResource( 5 )

[node name="gui" type="Control" parent="input_tracker"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1

[node name="add_event" type="Button" parent="input_tracker/gui"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 129.0
margin_top = 12.0
margin_right = 206.0
margin_bottom = 32.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
text = "Add event"
flat = false
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[node name="add_neuron" type="Button" parent="input_tracker/gui"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 128.0
margin_top = 35.0
margin_right = 214.0
margin_bottom = 55.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
text = "Add neuron"
flat = false
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[node name="reset_matrix" type="Button" parent="input_tracker/gui"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 129.0
margin_top = 60.0
margin_right = 215.0
margin_bottom = 80.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
text = "Reset"
flat = false
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[node name="save_actions" type="Button" parent="input_tracker/gui"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 129.0
margin_top = 84.0
margin_right = 215.0
margin_bottom = 104.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
text = "Save actions"
flat = false
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[node name="loader" type="Node2D" parent="input_tracker"]

script = SubResource( 6 )

[connection signal="mouse_entered" from="input_tracker/draw_area" to="input_tracker/draw_area" method="_on_draw_area_mouse_entered"]

[connection signal="mouse_exited" from="input_tracker/draw_area" to="input_tracker/draw_area" method="_on_draw_area_mouse_exited"]

[connection signal="pressed" from="input_tracker/gui/add_event" to="input_tracker" method="_on_add_event_pressed"]

[connection signal="pressed" from="input_tracker/gui/add_neuron" to="input_tracker" method="_on_add_neuron_pressed"]

[connection signal="pressed" from="input_tracker/gui/reset_matrix" to="input_tracker" method="_on_reset_matrix_pressed"]

[connection signal="pressed" from="input_tracker/gui/save_actions" to="input_tracker/loader" method="_on_save_actions_pressed"]


