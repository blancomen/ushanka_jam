[gd_scene load_steps=14 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]

script/source = "extends Node2D

var path
var round_path
export var speed = 80
export var round_speed = 60

func _ready():
	#path = get_parent().get_node(\"Path2D/PathFollow2D\")
	#round_path = get_node(\"round_path/PathFollow2D\")
	
	#set_physics_process(true)
	pass

func _physics_process(delta):
	# Update path position
	#path.set_offset(path.get_offset() + delta * speed)
	#round_path.set_offset(round_path.get_offset() + delta * round_speed)
	
	#self.position = path.position
	#get_node(\"round_path\").position = self.position
	#get_node(\"minik\").position = round_path.position
	#get_node(\"minik\").rotation += 0.1"
_sections_unfolded = [ "Resource" ]

[sub_resource type="Curve2D" id=2]

bake_interval = 5.0
_data = {
"points": PoolVector2Array( 0, 0, 0, 0, 57.3607, 38.7337, 0, 0, 0, 0, 169.519, 124.559, 0, 0, 0, 0, 344.095, 242.569, 0, 0, 0, 0, 424.068, 294.259, 0, 0, 0, 0, 508.918, 338.147 )
}

[sub_resource type="Curve2D" id=3]

bake_interval = 5.0
_data = {
"points": PoolVector2Array( 0, 0, 0, 0, 513.795, 341.073, 0, 0, 0, 0, 723.481, 222.088, 0, 0, 0, 0, 851.244, 119.682, 0, 0, 0, 0, 1004.36, 13.3763 )
}

[sub_resource type="Curve2D" id=4]

bake_interval = 5.0
_data = {
"points": PoolVector2Array( 0, 0, 0, 0, 1014.12, 592.697, 0, 0, 0, 0, 859.046, 500.044, 0, 0, 0, 0, 715.679, 446.404, 0, 0, 0, 0, 547.93, 360.578, 0, 0, 0, 0, 511.844, 345.949 )
}

[sub_resource type="Curve2D" id=5]

bake_interval = 5.0
_data = {
"points": PoolVector2Array( 0, 0, 0, 0, 508.918, 344.974, 0, 0, 0, 0, 301.182, 453.231, 0, 0, 0, 0, 110.026, 558.562, 0, 0, 0, 0, 2.74463, 597.573 )
}

[sub_resource type="GDScript" id=6]

script/source = "extends Node2D


var paths = []

func _ready():
	paths.append(get_parent().get_node(\"path_root/path_0\"))
	paths.append(get_parent().get_node(\"path_root/path_1\"))
	paths.append(get_parent().get_node(\"path_root/path_2\"))
	paths.append(get_parent().get_node(\"path_root/path_3\"))
	
	set_physics_process(true)
	set_process_input(true)
	
func _physics_process(delta):
	pass
	
func _input(event):
	if event.is_action_pressed(\"spawn_mob\"):
		var path_number = range()
	
#func _process(delta):
#	# Called every frame. Delta is time since last frame.
#	# Update game logic here.
#	pass
"

[sub_resource type="GDScript" id=11]

script/source = "extends Node2D

func _ready():
	pass
	
func _on_add_event_pressed():
	get_node(\"neuron\").add_event(get_node(\"matrix\").main_matrix)
	reset()
	
func reset():
	get_node(\"matrix\").reset()
	get_node(\"draw_area\").reset()
	get_node(\"normilized_track\").reset()

func _on_reset_matrix_pressed():
	reset()
"

[sub_resource type="GDScript" id=7]

script/source = "extends Container

var track = PoolVector2Array()
var is_touched = false
var should_save_track = false
var mouse_on = false

var norm_track
var active_matrix

func _ready():
	norm_track = get_parent().get_node(\"normilized_track\")
	active_matrix = get_parent().get_node(\"matrix\")
	
	set_process_input(true)
	set_physics_process(true)
	pass

func _physics_process(delta):
	if is_touched:
		if !should_save_track && mouse_on:
			track = PoolVector2Array()
			should_save_track = true
			
		if should_save_track:
			var mouse_pos = get_global_mouse_position()
		
			if track.size() < 100:
				track.push_back(mouse_pos)
	else:
		if should_save_track:
			norm_track.set_track(track)
			active_matrix.add_track(norm_track.crop_box(track))
			
		should_save_track = false
		
	update()

func _draw():
	var movavg_track = moving_average(track, 3)
	draw_track(track, Color(255, 255, 255), 2)
			
func draw_track(track, color, width):	
	var prev_coord = null
	for coordinate in track:
		if prev_coord != null:
			draw_line(prev_coord, coordinate, color, width)		
		prev_coord = coordinate

func _input(event):
	if event is InputEventMouseButton:
		if event.pressed:
			is_touched = true
		else:
			is_touched = false
			
func moving_average(coords, window):	
	var movavg_coords = PoolVector2Array()
	for i in range(coords.size()):
		if i >= window:
			var sum = Vector2()
			for j in range(window):
				sum += coords[i-j]
			movavg_coords.push_back(sum/window)
			
	return movavg_coords
	
func reset():
	track = PoolVector2Array()
	update()
			
func _on_draw_area_mouse_entered():
	mouse_on = true

func _on_draw_area_mouse_exited():
	mouse_on = false
"

[sub_resource type="GDScript" id=8]

script/source = "extends Node2D

var matrix_size = Vector2(18, 18)
var main_matrix = zeros_matrix(matrix_size.x, matrix_size.y)
var cell_size = 5

func _ready():
	pass

func add_track(track):
	main_matrix = fit_matrix(main_matrix, track)
	
	update()

func reset():
	main_matrix = zeros_matrix(matrix_size.x, matrix_size.y)
	update()

func get_height():
	return matrix_size.y * cell_size

func _draw():
	var mat_max = matrix_max_value(main_matrix)
	if mat_max == 0:
		mat_max = 1

	for row in range(main_matrix.size()):
		for column in range(main_matrix[row].size()):
			draw_rect(
				Rect2(
					column * cell_size,
					row * cell_size, 
					cell_size,
					cell_size
				), 
				Color(float(main_matrix[row][column]) / float(mat_max), 0, 0)
			)

func fit_matrix(matrix, track):
	var box = find_box(track)
	var maxPoint = Vector2(
		max(box[\"max\"].x, box[\"max\"].y), 
		max(box[\"max\"].x, box[\"max\"].y)
	)

	var step_done_matrix = zeros_matrix(matrix_size.x, matrix_size.y)
	var prev_coord = null
	for coord in track:
		if prev_coord == null:
			prev_coord = coord
			continue
	
		var step = 1
		var from = prev_coord
		var to = coord
		var distance = from.distance_to(to)
		var steps = floor(distance / step)
		
		var line_coord = prev_coord
		for s in range(steps):
			var i = ceil(line_coord.y / maxPoint.y * (matrix_size.y-1))
			var j = ceil(line_coord.x / maxPoint.x * (matrix_size.x-1))
			
			line_coord = line_coord.linear_interpolate(to, s/steps)
		
			if step_done_matrix[i][j] == 0:
				matrix[i][j] += 1
				step_done_matrix[i][j] = 1
			
			prev_coord = coord
			
	return matrix
	
func zeros_matrix(w, h):
	var matrix = []
	for i in range(h):
		matrix.push_back([])
		for j in range(w):
			matrix[i].push_back(0)
	return matrix 
	
func norm_matrix(matrix):
	var max_val = matrix_max_value(matrix)
	var norm_m = zeros_matrix(matrix_size.x, matrix_size.y)
	for row in range(matrix.size()):
		for column in range(matrix[row].size()):
			norm_m[row][column] = float(matrix[row][column])/float(max_val)

	return norm_m
	
func matrix_max_value(matrix):
	if matrix.size() == 0:
		return 0
		
	var maxVal = matrix[0][0]
	for row in matrix:
		for column in row:
			if maxVal < column:
				maxVal = column
	return maxVal

func find_box(coords):
	var box = {
		\"min\": Vector2(999999999, 999999999),
		\"max\": Vector2(-999999999, -999999999),
	}
	
	for coord in coords:
		box[\"min\"].x = min(box[\"min\"].x, coord.x)
		box[\"min\"].y = min(box[\"min\"].y, coord.y)
		box[\"max\"].x = max(box[\"max\"].x, coord.x)
		box[\"max\"].y = max(box[\"max\"].y, coord.y)
		
	return box

func _on_reset_matrix_pressed():
	main_matrix = zeros_matrix(matrix_size.x, matrix_size.y)
	update()
"

[sub_resource type="GDScript" id=9]

script/source = "tool
extends Node2D

var track = PoolVector2Array()
var track_size = Vector2(88, 88)

func _ready():
	pass

func set_track(t):
	t = normalize_coordinates(t)
	t = moving_average(t, 2)
	track = t
	
	update()

func reset():
	track = PoolVector2Array()
	update()

func _draw():
	var box = find_box(track)
	var maxCoord = Vector2(
		max(box[\"max\"].x, box[\"max\"].y), 
		max(box[\"max\"].x, box[\"max\"].y)
	)
	
	var step = 0.5
	var prev_coord = null
	for coordinate in track:
		if prev_coord != null:
			var from = prev_coord * track_size
			var to = coordinate * track_size
			var distance = from.distance_to(to)
			var steps = floor(distance / step)
			var line_coord = prev_coord * track_size
			draw_line(
				prev_coord * track_size, 
				coordinate * track_size, 
				Color(255, 255, 255),2
			)
		prev_coord = coordinate
	

func normalize_coordinates(coords):
	coords = crop_box(coords)
	var box = find_box(coords)
	var maxPoint = Vector2(
		max(box[\"max\"].x, box[\"max\"].y), 
		max(box[\"max\"].x, box[\"max\"].y)
	)
	
	#coords = centered_coords(coords)
	
	if maxPoint.x == 0:
		maxPoint.x = 1
	if maxPoint.y == 0:
		maxPoint.y = 1
	
	var normCoords = PoolVector2Array()
	for coord in coords:
		coord.x /= maxPoint.x
		coord.y /= maxPoint.y
		normCoords.push_back(coord)
	
	return normCoords

func centered_coords(coords):
	var box = find_box(coords)
	var maxPoint = Vector2(
		max(box[\"max\"].x, box[\"max\"].y), 
		max(box[\"max\"].x, box[\"max\"].y)
	)
	
	var centerCoords = PoolVector2Array()
	for coord in coords:
		coord.x -= box[\"max\"].x/2
		coord.y -= box[\"max\"].y/2
		centerCoords.push_back(coord)
		
	return centerCoords

func crop_box(coords):
	var box = find_box(coords)
	var cropedCoords = PoolVector2Array()
	var minPoint = Vector2(box[\"min\"].x, box[\"min\"].y)
	
	for coord in coords:
		cropedCoords.push_back(coord - minPoint)
	
	return cropedCoords
	
	
func find_box(coords):
	var box = {
		\"min\": Vector2(999999999, 999999999),
		\"max\": Vector2(-999999999, -999999999),
	}
	
	for coord in coords:
		box[\"min\"].x = min(box[\"min\"].x, coord.x)
		box[\"min\"].y = min(box[\"min\"].y, coord.y)
		box[\"max\"].x = max(box[\"max\"].x, coord.x)
		box[\"max\"].y = max(box[\"max\"].y, coord.y)
		
	return box

func moving_average(coords, window):	
	var movavg_coords = PoolVector2Array()
	for i in range(coords.size()):
		if i >= window:
			var sum = Vector2()
			for j in range(window):
				sum += coords[i-j]
			movavg_coords.push_back(sum/window)
			
	return movavg_coords"

[sub_resource type="GDScript" id=10]

script/source = "extends Node2D

var events = []

func _ready():
	pass
	
func add_event(event_matrix):
	var matrix_instance = get_parent().get_node(\"matrix\").duplicate()
	matrix_instance.main_matrix = event_matrix
	
	matrix_instance.position = Vector2(
		0, 
		matrix_instance.get_height() * events.size()
	)
	matrix_instance.cell_size = 1
	add_child(matrix_instance)
	
	events.append(matrix_instance)
	update_positions()
		
func get_height():
	var h = 0
	for i in range(events.size()):
		h += 18 * i + i
		
	return h

func update_positions():
	for i in range(events.size()):
		events[i].position  = Vector2(
			-48, 
			-get_height()/4 + events[i].get_height() * i + i
		)
	
	#var out = get_node(\"out\")
	#out.position.x = 48
	#out.position.y = (events.size()-1)*20 / 2
	#out.update()
	
	update()	
	
func _draw():
	for event in events:
		draw_line(
			event.position + Vector2(event.get_height()/2, event.get_height()/2), 
			get_node(\"out\").position + Vector2(event.get_height()/2, event.get_height()/2),
			Color(0, 0, 0)
		)
		
		
		
		"

[sub_resource type="GDScript" id=12]

script/source = "extends Node2D

var mouse_on = false
var out_size = Vector2(18, 18)

var select_color = Color(1, 0.3, 0)
var select_size = Vector2(2, 2)
var is_select = false
var select_pos = Vector2()

func _ready():
	set_physics_process(true)
	set_process_input(true)
	update()

func _physics_process(delta):
	update()
	var r = Rect2(
		to_global(self.position),
		out_size
	)
	
	if r.has_point(get_global_mouse_position()):
		mouse_on = true
	else:
		mouse_on = false
		
	if is_select:
		var move_vector = get_global_mouse_position() - select_pos
		select_pos = get_global_mouse_position()
		get_parent().position += move_vector
		update()
	
func _input(event):
	if event is InputEventMouseButton:
		if event.pressed:
			is_select = mouse_on 
			select_pos = get_global_mouse_position()
			update()
		else:
			is_select = false 
			update()
			
func _draw():
	if is_select:
		draw_rect(Rect2(-select_size, out_size + select_size * 2), select_color, true)
		
	var c = Color(1, 1, 1)
	if mouse_on:
		c = Color(1, 0, 0)
	draw_rect(Rect2(Vector2(0, 0), out_size), c)

	
		
		
		"

[node name="game" type="Node2D"]

_sections_unfolded = [ "Material", "Pause", "Transform", "Visibility", "Z" ]
__meta__ = {
"_edit_lock_": true
}

[node name="enemy" type="Node2D" parent="."]

editor/display_folded = true
position = Vector2( 481.462, -71.7093 )
script = SubResource( 1 )
_sections_unfolded = [ "Transform" ]
speed = 200
round_speed = 400

[node name="sprite" type="Sprite" parent="enemy"]

texture = ExtResource( 1 )

[node name="path_root" type="Node2D" parent="."]

editor/display_folded = true

[node name="path_0" type="Path2D" parent="path_root"]

curve = SubResource( 2 )

[node name="PathFollow2D" type="PathFollow2D" parent="path_root/path_0"]

position = Vector2( 57.3607, 38.7337 )
rotation = 2.22396
offset = 0.0
h_offset = 0.0
v_offset = 0.0
rotate = true
cubic_interp = true
loop = true
lookahead = 4.0

[node name="spawn" type="Node2D" parent="path_root/path_0"]

position = Vector2( 60.4678, 39.0115 )

[node name="path_1" type="Path2D" parent="path_root"]

position = Vector2( -1.95056, 0.975281 )
curve = SubResource( 3 )

[node name="PathFollow2D" type="PathFollow2D" parent="path_root/path_1"]

position = Vector2( 513.795, 341.073 )
rotation = 1.05466
offset = 0.0
h_offset = 0.0
v_offset = 0.0
rotate = true
cubic_interp = true
loop = true
lookahead = 4.0

[node name="spawn" type="Node2D" parent="path_root/path_1"]

position = Vector2( 994.792, 29.2586 )

[node name="path_2" type="Path2D" parent="path_root"]

curve = SubResource( 4 )

[node name="PathFollow2D" type="PathFollow2D" parent="path_root/path_2"]

position = Vector2( 1014.12, 592.697 )
rotation = -1.03224
offset = 0.0
h_offset = 0.0
v_offset = 0.0
rotate = true
cubic_interp = true
loop = true
lookahead = 4.0

[node name="spawn" type="Node2D" parent="path_root/path_2"]

position = Vector2( 1004.55, 587.123 )

[node name="path_3" type="Path2D" parent="path_root"]

position = Vector2( 0.975281, 0.975281 )
curve = SubResource( 5 )

[node name="PathFollow2D" type="PathFollow2D" parent="path_root/path_3"]

position = Vector2( 508.918, 344.974 )
rotation = -2.05119
offset = 0.0
h_offset = 0.0
v_offset = 0.0
rotate = true
cubic_interp = true
loop = true
lookahead = 4.0

[node name="spawn" type="Node2D" parent="path_root/path_3"]

position = Vector2( 33.1598, 572.493 )

[node name="spawner" type="Node2D" parent="."]

script = SubResource( 6 )

[node name="input_tracker" type="Node2D" parent="."]

position = Vector2( -0.999023, -0.998947 )
script = SubResource( 11 )

[node name="draw_area" type="Container" parent="input_tracker"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 1024.0
margin_bottom = 600.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1
script = SubResource( 7 )
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[node name="matrix" type="Node2D" parent="input_tracker"]

position = Vector2( 32, 8 )
script = SubResource( 8 )
_sections_unfolded = [ "Transform", "Z" ]

[node name="normilized_track" type="Node2D" parent="input_tracker"]

position = Vector2( 33, 9 )
script = SubResource( 9 )
_sections_unfolded = [ "Transform", "Visibility" ]

[node name="neuron" type="Node2D" parent="input_tracker"]

position = Vector2( 64, 120 )
script = SubResource( 10 )
_sections_unfolded = [ "Transform", "Z" ]

[node name="out" type="Node2D" parent="input_tracker/neuron"]

script = SubResource( 12 )

[node name="gui" type="Control" parent="input_tracker"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1

[node name="add_event" type="Button" parent="input_tracker/gui"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 129.0
margin_top = 12.0
margin_right = 206.0
margin_bottom = 32.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
text = "Add event"
flat = false
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[node name="add_neuron" type="Button" parent="input_tracker/gui"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 129.0
margin_top = 36.0
margin_right = 215.0
margin_bottom = 56.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
text = "Add neuron"
flat = false
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[node name="reset_matrix" type="Button" parent="input_tracker/gui"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 129.0
margin_top = 60.0
margin_right = 215.0
margin_bottom = 80.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
text = "Reset"
flat = false
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[node name="camera" type="Camera2D" parent="."]

offset = Vector2( 512, 300 )
anchor_mode = 1
rotating = false
current = true
zoom = Vector2( 1, 1 )
limit_left = -10000000
limit_top = -10000000
limit_right = 10000000
limit_bottom = 10000000
limit_smoothed = false
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_enabled = false
smoothing_speed = 5.0
drag_margin_left = 0.2
drag_margin_top = 0.2
drag_margin_right = 0.2
drag_margin_bottom = 0.2
editor_draw_screen = true
editor_draw_limits = false
editor_draw_drag_margin = false
_sections_unfolded = [ "Drag Margin", "Limit", "Smoothing", "Transform" ]

[connection signal="mouse_entered" from="input_tracker/draw_area" to="input_tracker/draw_area" method="_on_draw_area_mouse_entered"]

[connection signal="mouse_exited" from="input_tracker/draw_area" to="input_tracker/draw_area" method="_on_draw_area_mouse_exited"]

[connection signal="pressed" from="input_tracker/gui/add_event" to="input_tracker" method="_on_add_event_pressed"]

[connection signal="pressed" from="input_tracker/gui/reset_matrix" to="input_tracker" method="_on_reset_matrix_pressed"]


